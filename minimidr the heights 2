int getMinDiff(vector<int> &arr, int k) {
        // Step 1: Sort the array to simplify the comparison of heights
        sort(arr.begin(), arr.end());

        int n = arr.size();

        // Initialize the answer with the current difference between the tallest and
        // shortest towers
        int ans = arr[n - 1] - arr[0];

        // Traverse through each tower to consider possible modifications
        for (int i = 1; i < n; i++) {
            // If decreasing the current tower by k makes it negative, skip this
            // iteration
            if (arr[i] - k < 0)
                continue;

            //  Calculate the new minimum height:
            //  It's the smaller value between:
            //  - The first tower increased by k
            //  - The current tower decreased by k
            int mn = min(arr[0] + k, arr[i] - k);

            //  Calculate the new maximum height:
            //  It's the larger value between:
            //  - The previous tower increased by k
            //  - The last tower decreased by k
            int mx = max(arr[i - 1] + k, arr[n - 1] - k);

            // Update the answer with the smallest difference found so far
            ans = min(ans, mx - mn);
        }

        // Return the minimum possible difference after modifications
        return ans;
    }
};
